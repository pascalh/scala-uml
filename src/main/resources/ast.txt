@startuml need_to_find_id
package scalameta::util::namespaces::collector{
    class scalameta::util::namespaces::collector.TypeCollector << object >>{
        apply (tpe : Defn::Type) : TypeCollector 
    
    }
    class scalameta::util::namespaces::collector.TypeCollector << caseclass >>{
        << ctor >>TypeCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.TraitCollector << object >>{
        apply (trit : Defn::Trait) : TraitCollector 
    
    }
    class scalameta::util::namespaces::collector.TraitCollector << caseclass >>{
        << ctor >>TraitCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.StatsCollector << object >>{
        apply (stats : List<Stat>,  upperNamepace : Option<NamespaceEntry>) : StatsCollector 
    
    }
    class scalameta::util::namespaces::collector.StatsCollector << caseclass >>{
        << ctor >>StatsCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.StatCollector << object >>{
        apply (stat : Stat) : StatCollector 
    
    }
    class scalameta::util::namespaces::collector.StatCollector << caseclass >>{
        << ctor >>StatCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.SourcesCollector << object >>{
        apply (sources : List<Tuple2<Source,String>>) : SourcesCollector 
    
    }
    class scalameta::util::namespaces::collector.SourcesCollector << caseclass >>{
        << ctor >>SourcesCollector (resultingMap : Map<Entry,List<Tuple2<Stat,String>>>)  
    
    }
    class scalameta::util::namespaces::collector.SourceCollector << object >>{
        apply (source : Source) (<< implicit >>compilationUnitName : String) : SourceCollector 
    
    }
    class scalameta::util::namespaces::collector.SourceCollector << caseclass >>{
        << ctor >>SourceCollector (resultingMap : Map<Entry,List<Tuple2<Stat,String>>>)  
    
    }
    class scalameta::util::namespaces::collector.PkgCollector << object >>{
        apply (pkg : Pkg) : PkgCollector 
    
    }
    class scalameta::util::namespaces::collector.PkgCollector << caseclass >>{
        << ctor >>PkgCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.ObjectCollector << object >>{
        apply (obj : Defn::Object) : ObjectCollector 
    
    }
    class scalameta::util::namespaces::collector.ObjectCollector << caseclass >>{
        << ctor >>ObjectCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.EnumCollector << object >>{
        apply (enum : Defn::Enum) : EnumCollector 
    
    }
    class scalameta::util::namespaces::collector.EnumCollector << caseclass >>{
        << ctor >>EnumCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.ClassCollector << object >>{
        apply (cls : Defn::Class) : ClassCollector 
    
    }
    class scalameta::util::namespaces::collector.ClassCollector << caseclass >>{
        << ctor >>ClassCollector (resultingMap : Map<Entry,List<Stat>>)  
    
    }
    class scalameta::util::namespaces::collector.BaseNamespaceCollector << object >>{
        qualName (qual : Term::Ref) : NamespaceEntry 
    
    }
    abstract class scalameta::util::namespaces::collector.BaseNamespaceCollector << trait >>
}
scalameta::util::namespaces::collector.BaseNamespaceCollector --> "unknown" scala::collection::immutable.Map : resultingMap <<bind T0 -> Entry,T1 -> List<Stat> >>  > 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.ClassCollector 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.EnumCollector 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.ObjectCollector 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.PkgCollector 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.StatCollector 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.StatsCollector 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.TraitCollector 
scalameta::util::namespaces::collector.BaseNamespaceCollector <|-- scalameta::util::namespaces::collector.TypeCollector 
class scala::collection::immutable.Map< T0, T1 > 
@enduml