@startuml need_to_find_id
package com::github::theorydudes::model::model{
    class com::github::theorydudes::model::model.$Python << object >>{
        apply (pCode : String) : Python
        fromPythonAST (expressionMod : ExpressionMod) : Python 
    
    }
    class com::github::theorydudes::model::model.Python << caseclass >>{
        pythonAST : ExpressionMod 
        << ctor >>Python (pCode : String) 
        toString  : String
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : Python 
    
    }
    class com::github::theorydudes::model::model.Reset << caseclass >>{
        << ctor >>Reset (name : String) 
        toString  : String
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : KivyString 
    
    }
    class com::github::theorydudes::model::model.WName << caseclass >>{
        << ctor >>WName (name : String) 
        toString  : String
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : KivyString 
    
    }
    abstract class com::github::theorydudes::model::model.KivyString << trait >>{
        traverseAndApply (s : Strategy) : KivyString 
    -- <<scalaclass>> --
        isSealed
    }
    class com::github::theorydudes::model::model.Template << caseclass >>{
        << ctor >>Template (classWidget : AutoClass,  widgetBody : List<ASTNode>) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : RootNodeElement 
    
    }
    class com::github::theorydudes::model::model.AutoClass << caseclass >>{
        << ctor >>AutoClass (widgetList : ClassList,  widgetBase : Option<ClassListBase>) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : AutoClass 
    
    }
    class com::github::theorydudes::model::model.ClassListBase << caseclass >>{
        << ctor >>ClassListBase (names : List<KivyString>) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : ClassListBase 
    
    }
    class com::github::theorydudes::model::model.ClassList << caseclass >>{
        << ctor >>ClassList (names : List<KivyString>) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : ClassList 
    
    }
    class com::github::theorydudes::model::model.ClassRule << caseclass >>{
        << ctor >>ClassRule (classWidget : AutoClass,  widgetBody : List<ASTNode>) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : RootNodeElement 
    
    }
    class com::github::theorydudes::model::model.Comment << caseclass >>{
        << ctor >>Comment (comment : String) 
        toString  : String
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : Comment 
    
    }
    class com::github::theorydudes::model::model.Property << caseclass >>{
        << ctor >>Property (name : String,  propertyBody : List<Python>) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : Property 
    
    }
    class com::github::theorydudes::model::model.Instruction << caseclass >>{
        << ctor >>Instruction (name : WName,  instructionBody : InstructionBody) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : CanvasBodyElement 
    
    }
    class com::github::theorydudes::model::model.Canvas << caseclass >>{
        << ctor >>Canvas (canvasType : CanvasType::canvasType,  canvasBody : CanvasBody) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : WidgetBodyElement 
    
    }
    class com::github::theorydudes::model::model.Widget << caseclass >>{
        << ctor >>Widget (name : WName,  widgetBody : WidgetBody) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : WidgetBodyElement 
    
    }
    class com::github::theorydudes::model::model.Root << caseclass >>{
        << ctor >>Root (widget : Widget) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : RootNodeElement 
    
    }
    class com::github::theorydudes::model::model.Directive << caseclass >>{
        << ctor >>Directive (directive : String) 
        toString  : String
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : RootNodeElement 
    
    }
    class com::github::theorydudes::model::model.TopLevel << caseclass >>{
        << ctor >>TopLevel (rootLevelNodes : RootLevelNodes) 
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        traverseAndApply (s : Strategy) : TopLevel 
    
    }
    abstract class com::github::theorydudes::model::model.CanvasBody << type >>{
        << typeDef >>_type_ : List<CanvasBodyElement> 
         
    }
    abstract class com::github::theorydudes::model::model.InstructionBody << type >>{
        << typeDef >>_type_ : List<InstructionBodyElement> 
         
    }
    abstract class com::github::theorydudes::model::model.WidgetBody << type >>{
        << typeDef >>_type_ : List<WidgetBodyElement> 
         
    }
    abstract class com::github::theorydudes::model::model.RootLevelNodes << type >>{
        << typeDef >>_type_ : List<RootNodeElement> 
         
    }
    class com::github::theorydudes::model::model.CanvasType << object >>
    abstract class com::github::theorydudes::model::model.RootNodeElement << trait >>{
        traverseAndApply (s : Strategy) : RootNodeElement 
    
    }
    abstract class com::github::theorydudes::model::model.CanvasBodyElement << trait >>{
        traverseAndApply (s : Strategy) : CanvasBodyElement 
    
    }
    abstract class com::github::theorydudes::model::model.InstructionBodyElement << trait >>{
        traverseAndApply (s : Strategy) : InstructionBodyElement 
    
    }
    abstract class com::github::theorydudes::model::model.WidgetBodyElement << trait >>{
        traverseAndApply (s : Strategy) : WidgetBodyElement 
    
    }
}
package com::github::theorydudes::model::model::CanvasType{
    class com::github::theorydudes::model::model::CanvasType.After << caseobject >>{
        toString  : String 
    
    }
    class com::github::theorydudes::model::model::CanvasType.Before << caseobject >>{
        toString  : String 
    
    }
    class com::github::theorydudes::model::model::CanvasType.Regular << caseobject >>{
        toString  : String 
    
    }
    abstract class com::github::theorydudes::model::model::CanvasType.canvasType << trait >>
}
package com::github::theorydudes::model{
    class com::github::theorydudes::model.model << object >>{
        foldList< B > (ans : List<ASTNode>) (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        foldOption< B > (opt : Option<ASTNode>) (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B 
    
    }
    abstract class com::github::theorydudes::model.ASTNode << trait >>{
        - traverseAndApply (s : Strategy) : ASTNode
        rewrite (fp : ==><ASTNode,ASTNode>) : ASTNode
        pretty  : String 
    
    }
    abstract class com::github::theorydudes::model.FoldableAST << trait >>{
        foldLeft< B > (z : B) (op : Func<Tuple2<B,ASTNode>,B>) : B
        exists (astNode : ASTNode) : Boolean
        forall (f : Func<ASTNode,Boolean>) : Boolean
        reduceLeftToOption< B > (f : Func<ASTNode,B>) (g : Func<Tuple2<B,ASTNode>,B>) : Option<B>
        get (index : Int) : ASTNode
        indexOf (node : ASTNode) : Int
        collectFirst< B > (pf : PartialFunction<ASTNode,B>) : Option<B>
        find (f : Func<ASTNode,Boolean>) : Option<ASTNode>
        toList  : List<ASTNode>
        filter (p : Func<ASTNode,Boolean>) : List<ASTNode> 
    
    }
}
com::github::theorydudes::model.FoldableAST <|-- com::github::theorydudes::model.ASTNode 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.WidgetBodyElement 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.InstructionBodyElement 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.CanvasBodyElement 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.RootNodeElement 
com::github::theorydudes::model::model::CanvasType.canvasType <|-- com::github::theorydudes::model::model::CanvasType.Regular 
com::github::theorydudes::model::model::CanvasType.canvasType <|-- com::github::theorydudes::model::model::CanvasType.Before 
com::github::theorydudes::model::model::CanvasType.canvasType <|-- com::github::theorydudes::model::model::CanvasType.After 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.TopLevel 
com::github::theorydudes::model::model.RootNodeElement <|-- com::github::theorydudes::model::model.Directive 
com::github::theorydudes::model::model.RootNodeElement <|-- com::github::theorydudes::model::model.Root 
com::github::theorydudes::model::model.WidgetBodyElement <|-- com::github::theorydudes::model::model.Widget 
com::github::theorydudes::model::model.WidgetBodyElement <|-- com::github::theorydudes::model::model.Canvas 
com::github::theorydudes::model::model.CanvasBodyElement <|-- com::github::theorydudes::model::model.Instruction 
com::github::theorydudes::model::model.WidgetBodyElement <|-- com::github::theorydudes::model::model.Property 
com::github::theorydudes::model::model.InstructionBodyElement <|-- com::github::theorydudes::model::model.Property 
com::github::theorydudes::model::model.WidgetBodyElement <|-- com::github::theorydudes::model::model.Comment 
com::github::theorydudes::model::model.InstructionBodyElement <|-- com::github::theorydudes::model::model.Comment 
com::github::theorydudes::model::model.CanvasBodyElement <|-- com::github::theorydudes::model::model.Comment 
com::github::theorydudes::model::model.RootNodeElement <|-- com::github::theorydudes::model::model.Comment 
com::github::theorydudes::model::model.RootNodeElement <|-- com::github::theorydudes::model::model.ClassRule 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.ClassList 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.ClassListBase 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.AutoClass 
com::github::theorydudes::model::model.RootNodeElement <|-- com::github::theorydudes::model::model.Template 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.KivyString 
com::github::theorydudes::model::model.KivyString <|-- com::github::theorydudes::model::model.WName 
com::github::theorydudes::model::model.KivyString <|-- com::github::theorydudes::model::model.Reset 
com::github::theorydudes::model.ASTNode <|-- com::github::theorydudes::model::model.Python 
com::github::theorydudes::model.model +-- com::github::theorydudes::model::model : << objectdef >>
com::github::theorydudes::model::model.CanvasType +-- com::github::theorydudes::model::model::CanvasType : << objectdef >>
com::github::theorydudes::model::model.Python .. com::github::theorydudes::model::model.$Python : << companion >>
@enduml